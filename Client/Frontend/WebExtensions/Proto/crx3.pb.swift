// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: crx3.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CrxFile_CrxFileHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// PSS signature with RSA public key. The public key is formatted as a
  /// X.509 SubjectPublicKeyInfo block, as in CRXâ‚‚. In the common case of a
  /// developer key proof, the first 128 bits of the SHA-256 hash of the
  /// public key must equal the crx_id.
  var sha256WithRsa: [CrxFile_AsymmetricKeyProof] = []

  /// ECDSA signature, using the NIST P-256 curve. Public key appears in
  /// named-curve format.
  /// The pinned algorithm will be this, at least on 2017-01-01.
  var sha256WithEcdsa: [CrxFile_AsymmetricKeyProof] = []

  /// A verified contents file containing signatures over the archive contents.
  /// The verified contents are encoded in UTF-8 and then GZIP-compressed.
  /// Consult
  /// https://source.chromium.org/chromium/chromium/src/+/main:extensions/browser/verified_contents.h
  /// for information about the verified contents format.
  var verifiedContents: Data {
    get {return _verifiedContents ?? Data()}
    set {_verifiedContents = newValue}
  }
  /// Returns true if `verifiedContents` has been explicitly set.
  var hasVerifiedContents: Bool {return self._verifiedContents != nil}
  /// Clears the value of `verifiedContents`. Subsequent reads from it will return its default value.
  mutating func clearVerifiedContents() {self._verifiedContents = nil}

  /// The binary form of a SignedData message. We do not use a nested
  /// SignedData message, as handlers of this message must verify the proofs
  /// on exactly these bytes, so it is convenient to parse in two steps.
  ///
  /// All proofs in this CrxFile message are on the value
  /// "CRX3 SignedData\x00" + signed_header_size + signed_header_data +
  /// archive, where "\x00" indicates an octet with value 0, "CRX3 SignedData"
  /// is encoded using UTF-8, signed_header_size is the size in octets of the
  /// contents of this field and is encoded using 4 octets in little-endian
  /// order, signed_header_data is exactly the content of this field, and
  /// archive is the remaining contents of the file following the header.
  var signedHeaderData: Data {
    get {return _signedHeaderData ?? Data()}
    set {_signedHeaderData = newValue}
  }
  /// Returns true if `signedHeaderData` has been explicitly set.
  var hasSignedHeaderData: Bool {return self._signedHeaderData != nil}
  /// Clears the value of `signedHeaderData`. Subsequent reads from it will return its default value.
  mutating func clearSignedHeaderData() {self._signedHeaderData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _verifiedContents: Data? = nil
  fileprivate var _signedHeaderData: Data? = nil
}

struct CrxFile_AsymmetricKeyProof {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var publicKey: Data {
    get {return _publicKey ?? Data()}
    set {_publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  var hasPublicKey: Bool {return self._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  mutating func clearPublicKey() {self._publicKey = nil}

  var signature: Data {
    get {return _signature ?? Data()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  mutating func clearSignature() {self._signature = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _publicKey: Data? = nil
  fileprivate var _signature: Data? = nil
}

struct CrxFile_SignedData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// This is simple binary, not UTF-8 encoded mpdecimal; i.e. it is exactly
  /// 16 bytes long.
  var crxID: Data {
    get {return _crxID ?? Data()}
    set {_crxID = newValue}
  }
  /// Returns true if `crxID` has been explicitly set.
  var hasCrxID: Bool {return self._crxID != nil}
  /// Clears the value of `crxID`. Subsequent reads from it will return its default value.
  mutating func clearCrxID() {self._crxID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _crxID: Data? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension CrxFile_CrxFileHeader: @unchecked Sendable {}
extension CrxFile_AsymmetricKeyProof: @unchecked Sendable {}
extension CrxFile_SignedData: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "crx_file"

extension CrxFile_CrxFileHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CrxFileHeader"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "sha256_with_rsa"),
    3: .standard(proto: "sha256_with_ecdsa"),
    4: .standard(proto: "verified_contents"),
    10000: .standard(proto: "signed_header_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.sha256WithRsa) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.sha256WithEcdsa) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self._verifiedContents) }()
      case 10000: try { try decoder.decodeSingularBytesField(value: &self._signedHeaderData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sha256WithRsa.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sha256WithRsa, fieldNumber: 2)
    }
    if !self.sha256WithEcdsa.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sha256WithEcdsa, fieldNumber: 3)
    }
    try { if let v = self._verifiedContents {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._signedHeaderData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 10000)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CrxFile_CrxFileHeader, rhs: CrxFile_CrxFileHeader) -> Bool {
    if lhs.sha256WithRsa != rhs.sha256WithRsa {return false}
    if lhs.sha256WithEcdsa != rhs.sha256WithEcdsa {return false}
    if lhs._verifiedContents != rhs._verifiedContents {return false}
    if lhs._signedHeaderData != rhs._signedHeaderData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CrxFile_AsymmetricKeyProof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AsymmetricKeyProof"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
    2: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._publicKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._publicKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._signature {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CrxFile_AsymmetricKeyProof, rhs: CrxFile_AsymmetricKeyProof) -> Bool {
    if lhs._publicKey != rhs._publicKey {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CrxFile_SignedData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignedData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "crx_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._crxID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._crxID {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CrxFile_SignedData, rhs: CrxFile_SignedData) -> Bool {
    if lhs._crxID != rhs._crxID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
